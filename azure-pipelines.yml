trigger:
  batch: true
  branches:
    include:
    - master

resources:
  containers:
  - container: ubuntu1404
    image: mardy/qt:trusty-qt512
    
jobs:
- job: 'WindowsBuild'
  displayName: "End-to-end Windows build & package"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  pool:
    vmImage: 'vs2017-win2016'

  steps:
  
    - script: |
        choco install doxygen.install
      displayName: 'Install dependencies'
  
    - bash: |
        #rm -rf binaries/*mac*.zip
        #rm -rf binaries/*linux*.zip
        #rm -rf history
        #rm -rf src/applications/individualApps/libra/MCRInstaller.zip
      displayName: 'Take the nuclear option'

    - script: |
        mkdir bin
        cd bin
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="./install" ..
        setx PATH "%PATH%;$(Build.SourcesDirectory)/bin/qt/5.12.1/bin"
        cmake --build . --target ALL_BUILD --config Release
      displayName: 'Configure and compile Superbuild'
    
    - script: |
        cd bin
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="./install" -DCheckOpenGL_DISABLE_CWL=ON ..
        setx PATH "%PATH%;$(Build.SourcesDirectory)/bin/qt/5.12.1/bin"
        cmake --build . --target ALL_BUILD --config Release
      displayName: 'Configure and compile CheckOpenGL'
    
    - script: |
        #rm -rf binaries
        #rm -rf regression
        rm -rf scripts
        ls -lt
        cd bin
        rm -rf qt.zip
        ls -lt
      displayName: 'Removing the binaries folder'
     
    #- script: |
    #    cd bin
    #    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #    cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="./install" ..
    #    cmake --build . --target PACKAGE --config Release
    #
    #    mv CheckOpenGL_*_Installer.exe $(Build.ArtifactStagingDirectory)
    #    
    #    cd ../
    #    rm -rf *
    #    
    #  displayName: 'Package CheckOpenGL'
    #
    #- script: | 
    #    cd bin
    #    #call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #    echo "Deleting folders to make space"
    #    rm -rf qt
    #    rm -rf externalApps
    #    rm -rf binaries_windows.zip
    #    rm -rf ../src
    #    mv CheckOpenGL_*_Installer.exe ../
    #    
    #  displayName: 'Moving Installer one level up'
    #
    #- task: PublishBuildArtifacts@1
    #  inputs:
    #    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #    artifactName: '$(Build.DefinitionName)_installer_windows'
    #
    #- task: DownloadBuildArtifacts@0
    #  inputs:
    #    buildType: 'current'
    #    downloadType: 'single'
    #    artifactName: '$(Build.DefinitionName)_installer_windows'
    #    downloadPath: '$(System.ArtifactsDirectory)'

- job: 'XenialBuild'
  displayName: "End-to-end Linux (Xenial) build"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
    # Pull LFS
    - bash: |
        #git lfs pull
        echo "Not doing this until quota is improved on GitHub"
      displayName: 'Pull LFS'

    # Dependency manager
    - bash: |
        sudo apt-get install -qq gcc g++ make libgl-dev cmake python3-pip python-numpy dos2unix libxkbcommon-x11-0 doxygen
      displayName: 'Install dependencies from Aptitude'

  # Debug info before main scripts start
  # - bash: |
  #     ls -al
  #   displayName: 'Get debugging information'

    # Create build dir
    - bash: |
        mkdir -p bin
      displayName: 'Create build directory'

    # Create as much free memory as possible

    # Nuclear Option #1
    - bash: |
        #rm -rf binaries/*mac*.zip
        #rm -rf binaries/*windows*.zip
        #rm -rf history
        #rm -rf src/applications/individualApps/libra/MCRInstaller.zip
      displayName: 'Take the nuclear option'

    # Create fake test dirs. Can be removed.
    # - bash: |   
    #     cd bin
    #     mkdir -p testing
    #     mkdir -p ./testing/TestData
    #   displayName: 'Create phony tests'

    # Configure and build superbuild
    - bash: |
        cd bin
        cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
        make -j2
      displayName: 'Configure and compile Superbuild'

    # Configure and build CheckOpenGL
    - bash: |
        cd bin
        cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
        make -j2
        #make install/strip
      displayName: 'Configure and compile CheckOpenGL'

    # Check qt
    - bash: |
        cd bin
        ls -a
        ls ./qt/
      displayName: 'Check qt'
      
    # Check libra
    - bash: |
        cd bin/install/appdir/usr/bin/
        ls -l
      displayName: 'Checking ${installDir}/bin'
      
    # Build a package
    - bash: |
        export PATH=`pwd`/bin/qt/5.12.1/bin:$PATH
        export PATH=`pwd`/bin/qt/5.12.1/libexec:$PATH
        export CMAKE_PREFIX_PATH=`pwd`/bin/qt/5.12.1/lib/cmake/Qt5:$CMAKE_PREFIX_PATH
        rm -rf regression
        rm -rf binaries

        #make install
        
        chmod +x ./scripts/pkg

        # export PKG_FAST_MODE=1
        ./scripts/pkg
        ./scripts/pkg

        rm -rf bin
        rm -rf src
        rm -rf docs*

        rm -rf scripts

        mv CheckOpenGL_*_Installer.bin $(Build.ArtifactStagingDirectory)
        
      displayName: 'Set up environment variables for packager and build a package'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(Build.DefinitionName)_installer_Linux'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(Build.DefinitionName)_installer_Linux'
        downloadPath: '$(System.ArtifactsDirectory)'
    
- job: 'MacOSBuild'
  displayName: "End-to-end MacOS build & package"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  pool:
    vmImage: 'MacOS-10.13'

  steps:
    - bash: |
        brew install caskroom/cask/mactex make doxygen llvm
      displayName: 'Brew dependencies'
    
    - bash: |
        #rm -rf binaries/*linux*.zip
        #rm -rf binaries/*windows*.zip
        #rm -rf history
        #rm -rf src/applications/individualApps/libra/MCRInstaller.zip
      displayName: 'Take the nuclear option'

    - bash: |
        export CC=""
        export CXX=""
        export LDFLAGS=""
        export CPPFLAGS=""

        git lfs install && git lfs fetch --all

        export CMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE
        export CMAKE_PREFIX_PATH="/Library/TeX/texbin"
      displayName: 'Export variables'

    - bash: |
        mkdir bin
      displayName: 'Create build directory'
    
    - bash: |
        cd bin

        cmake ../ -DCMAKE_INSTALL_PREFIX="./install"
        cmake ../ -DCMAKE_INSTALL_PREFIX="./install"

        make -j2
      displayName: 'Configure and compile Superbuild'

    - bash: |
        cd bin

        rm CMakeCache.txt

        export CC=/usr/local/opt/llvm/bin/clang
        export CXX=/usr/local/opt/llvm/bin/clang++
        export LDFLAGS="-L/usr/local/opt/llvm/lib"
        export CPPFLAGS="-L/usr/local/opt/llvm/include"

        cmake ../
        cmake ../

        make 
      displayName: 'Export variables for llvm then configure and compile CheckOpenGL'
    
    - bash: |
        cd bin

        rm CMakeCache.txt
        rm -rf CheckOpenGL*.app

        export CC=/usr/local/opt/llvm/bin/clang
        export CXX=/usr/local/opt/llvm/bin/clang++
        export LDFLAGS="-L/usr/local/opt/llvm/lib"
        export CPPFLAGS="-L/usr/local/opt/llvm/include"

        cmake ../
        cmake ../

        make 
      displayName: 'Ensure documentations are picked up properly'
    
    
    - bash: |
        cd bin 
        
        make package

        version=$(grep -i -e "project_version:*" CMakeCache.txt | cut -c24-)
        pkgname="_Installer"
        pkgname="$version$pkgname"

        pkgbuild --version $version --identifier com.cbica.CheckOpenGL --install-location /Applications --component ./_CPack_Packages/OSX/DragNDrop/CheckOpenGL_$version/CheckOpenGL_$version.app/  ./CheckOpenGL_$version.pkg

        productbuild --synthesize --package CheckOpenGL_$version.pkg ./distribution.xml

        xml='<?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="1">
            <title>CheckOpenGL_'"$version"'</title>
            <license file="Combined.txt"></license>
            <pkg-ref id="com.cbica.CheckOpenGL"/>
            <options customize="never" require-scripts="false"/>
            <choices-outline>
                <line choice="default">
                    <line choice="com.cbica.CheckOpenGL"/>
                </line>
            </choices-outline>
            <choice id="default"/>
            <choice id="com.cbica.CheckOpenGL" visible="false">
                <pkg-ref id="com.cbica.CheckOpenGL"/>
            </choice>
            <pkg-ref id="com.cbica.CheckOpenGL" version="$version" onConclusion="none">CheckOpenGL_'"$version"'.pkg</pkg-ref>
        </installer-gui-script>' 

        echo $xml > "./distribution.xml"

        productbuild --distribution ./distribution.xml --resources ./_CPack_Packages/OSX/DragNDrop/CheckOpenGL_$version/CheckOpenGL_$version.app/Contents/Resources/license/ --package-path . ./CheckOpenGL_$pkgname.pkg
        
        mv *Installer.pkg $(Build.ArtifactStagingDirectory)
        rm -rf *
      displayName: 'Package CheckOpenGL (.dmg and .pkg)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(Build.DefinitionName)_installer_macOS'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(Build.DefinitionName)_installer_macOS'
        downloadPath: '$(System.ArtifactsDirectory)'
  
#### SELF-HOSTED AGENTS

# - job: 'XenialSelfHostedBuild'
#   displayName: "End-to-end Linux (Xenial) build"
#   timeoutInMinutes: 0
#   cancelTimeoutInMinutes: 300

#   pool: Default

#   steps:
#     # Pull LFS
#     - bash: |
#         git lfs pull
#       displayName: 'Pull LFS'

#     # Create build dir
#     - bash: |
#         mkdir -p bin
#       displayName: 'Create build directory'

#     # Configure and build superbuild
#     - bash: |
#         cd bin
#         cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
#         make -j2
#       displayName: 'Configure and compile Superbuild'

#     # Configure and build CheckOpenGL
#     - bash: |
#         cd bin
#         cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
#         make -j2
#         make install/strip
#       displayName: 'Configure and compile CheckOpenGL'

#     # Check qt
#     - bash: |
#         cd bin
#         ls -a
#         ls ./qt/
#       displayName: 'Check qt'
      
#     # Check libra
#     - bash: |
#         cd bin/install/appdir/usr/bin/
#         ls -l
#       displayName: 'Checking ${installDir}/bin'
      
#     # Build a package
#     - bash: |
#         export PATH=`pwd`/bin/qt/5.12.1/bin:$PATH
#         export PATH=`pwd`/bin/qt/5.12.1/libexec:$PATH
#         export CMAKE_PREFIX_PATH=`pwd`/bin/qt/5.12.1/lib/cmake/Qt5:$CMAKE_PREFIX_PATH

#         make install

#         ./scripts/CheckOpenGL-pkg

#         rm -rf bin

#         mv CheckOpenGL_*_Installer.bin $(Build.ArtifactStagingDirectory)
        
#       displayName: 'Set up environment variables for packager and build a package'

#     - task: PublishBuildArtifacts@1
#       inputs:
#         pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         artifactName: '$(Build.DefinitionName)_installer_Linux_selfhosted'

#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: '$(Build.DefinitionName)_installer_Linux_selfhosted'
#         downloadPath: '$(System.ArtifactsDirectory)'


# - job: 'MacOSSelfHostBuild'
#   displayName: "Self-hosted MacOS agent"
#   timeoutInMinutes: 0
#   cancelTimeoutInMinutes: 300

#   pool: Default

#   steps:

#     - bash: |
#         export CC=""
#         export CXX=""
#         export LDFLAGS=""
#         export CPPFLAGS=""

#         git lfs install && git lfs fetch --all

#         export CMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE
#         export CMAKE_PREFIX_PATH="/Library/TeX/texbin"
#       displayName: 'Export variables'

#     - bash: |
#         mkdir bin
#       displayName: 'Create build directory'
  
#     - bash: |
#         cd bin

#         cmake ../ -DCMAKE_INSTALL_PREFIX="./install"
#         cmake ../ -DCMAKE_INSTALL_PREFIX="./install"

#         make -j2
#       displayName: 'Configure and compile Superbuild'

#     - bash: |
#         cd bin

#         rm CMakeCache.txt

#         export CC=/usr/local/opt/llvm/bin/clang
#         export CXX=/usr/local/opt/llvm/bin/clang++
#         export LDFLAGS="-L/usr/local/opt/llvm/lib"
#         export CPPFLAGS="-L/usr/local/opt/llvm/include"

#         cmake ../
#         cmake ../

#         make 
#       displayName: 'Export variables for llvm then configure and compile CheckOpenGL'
  
#     - bash: |
#         cd bin

#         rm CMakeCache.txt
#         rm -rf CheckOpenGL*.app

#         export CC=/usr/local/opt/llvm/bin/clang
#         export CXX=/usr/local/opt/llvm/bin/clang++
#         export LDFLAGS="-L/usr/local/opt/llvm/lib"
#         export CPPFLAGS="-L/usr/local/opt/llvm/include"

#         cmake ../
#         cmake ../

#         make 
#       displayName: 'Ensure documentations are picked up properly'
  
  
#     - bash: |
#         cd bin 
      
#         make package

#         version=$(grep -i -e "project_version:*" CMakeCache.txt | cut -c24-)
#         pkgname="_Installer"
#         pkgname="$version$pkgname"

#         pkgbuild --version $version --identifier com.cbica.CheckOpenGL --install-location /Applications --component ./_CPack_Packages/OSX/DragNDrop/CheckOpenGL_$version/CheckOpenGL_$version.app/  ./CheckOpenGL_$version.pkg

#         productbuild --synthesize --package CheckOpenGL_$version.pkg ./distribution.xml

#         xml='<?xml version="1.0" encoding="utf-8"?>
#         <installer-gui-script minSpecVersion="1">
#             <title>CheckOpenGL_'"$version"'</title>
#             <license file="Combined.txt"></license>
#             <pkg-ref id="com.cbica.CheckOpenGL"/>
#             <options customize="never" require-scripts="false"/>
#             <choices-outline>
#                 <line choice="default">
#                     <line choice="com.cbica.CheckOpenGL"/>
#                 </line>
#             </choices-outline>
#           <choice id="default"/>
#             <choice id="com.cbica.CheckOpenGL" visible="false">
#                 <pkg-ref id="com.cbica.CheckOpenGL"/>
#             </choice>
#             <pkg-ref id="com.cbica.CheckOpenGL" version="$version" onConclusion="none">CheckOpenGL_'"$version"'.pkg</pkg-ref>
#         </installer-gui-script>' 

#         echo $xml > "./distribution.xml"

#         productbuild --distribution ./distribution.xml --resources ./_CPack_Packages/OSX/DragNDrop/CheckOpenGL_$version/CheckOpenGL_$version.app/Contents/Resources/license/ --package-path . ./CheckOpenGL_$pkgname.pkg
      
#         mv *Installer.pkg $(Build.ArtifactStagingDirectory)
#         rm -rf *
#       displayName: 'Package CheckOpenGL (.dmg and .pkg)'

#     - task: PublishBuildArtifacts@1
#       inputs:
#         pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         artifactName: '$(Build.DefinitionName)_installer_macOS_selfhosted'

#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: '$(Build.DefinitionName)_installer_macOS_selfhosted'
#         downloadPath: '$(System.ArtifactsDirectory)'

#- job: 'TrustyDockerBuild'
#  displayName: "End-to-end Trusty build & package"
#  timeoutInMinutes: 0
#  cancelTimeoutInMinutes: 360
#  
#  pool:
#    vmImage: 'ubuntu-16.04'
#  
#  container: ubuntu1404
#  
#  steps:
#  
#    # Dependency manager
#    - bash: |
#        sudo apt-get install -qq gcc g++ make libglu1-mesa-dev freeglut3-dev mesa-common-dev cmake python3-pip python-numpy dos2unix libxkbcommon-x11-0 doxygen wget zlib1g-dev zlib-bin curl libxt-dev 
#        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
#        #sudo apt-get update
#        #sudo apt-get install g++-4.9
#        gcc --version
#      displayName: 'Install dependencies from Aptitude'
#
#    # install LFS
#    - bash: |
#        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
#        sudo apt-get install git-lfs
#      displayName: 'Install LFS'
#
#    # Pull LFS
#    - bash: |
#        git lfs pull
#      displayName: 'Pull LFS'
#
#    # CMake install
#    - script: |
#        wget https://github.com/Kitware/CMake/releases/download/v3.12.1/cmake-3.12.1.tar.gz
#        tar -xzvf cmake-3.12.1.tar.gz
#        cd cmake-3.12.1
#        ./configure --system-curl
#        make -j2
#        sudo make install/strip
#        cmake --version
#      displayName: 'Update CMake'
#
#  # Debug info before main scripts start
#  # - bash: |
#  #     ls -al
#  #   displayName: 'Get debugging information'
#
#    # Create build dir
#    - script: |
#        mkdir -p bin
#      displayName: 'Create build directory'
#
#    # Create as much free memory as possible
#
#    # Nuclear Option #1
#    - script: |
#        rm -rf binaries/*mac*.zip
#        rm -rf binaries/*windows*.zip
#        rm -rf history
#        rm -rf src/applications/individualApps/libra/MCRInstaller.zip
#      displayName: 'Take the nuclear option'
#
#    # Create fake test dirs. Can be removed.
#    # - bash: |   
#    #     cd bin
#    #     mkdir -p testing
#    #     mkdir -p ./testing/TestData
#    #   displayName: 'Create phony tests'
#
#    # Configure and build superbuild
#    - script: |
#        cd bin
#        cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" ..
#        make -j2
#      displayName: 'Configure and compile Superbuild'
#
#    # Configure and build CheckOpenGL
#    - script: |
#        cd bin
#        cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" ..
#        make -j2
#        make install/strip
#      displayName: 'Configure and compile CheckOpenGL'
#
#    # Check libra
#    - script: |
#        cd bin/install/appdir/usr/bin/
#        ls -l
#      displayName: 'Checking ${installDir}/bin'
#      
#    # Build a package
#    - script: |
#        rm -rf regression
#        rm -rf binaries
#
#        make install
#
#        # export PKG_FAST_MODE=1
#        ./scripts/CheckOpenGL-pkg
#        # ./scripts/CheckOpenGL-pkg
#
#        rm -rf bin
#        rm -rf src
#        rm -rf docs*
#
#        rm -rf scripts
#
#        mv CheckOpenGL_*_Installer.bin $(Build.ArtifactStagingDirectory)
#        
#      displayName: 'Set up environment variables for packager and build a package'
#    
#    - task: PublishBuildArtifacts@1
#      inputs:
#        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#        artifactName: '$(Build.DefinitionName)_installer_Linux'
#
#    - task: DownloadBuildArtifacts@0
#      inputs:
#        buildType: 'current'
#        downloadType: 'single'
#        artifactName: '$(Build.DefinitionName)_installer_Linux'
#        downloadPath: '$(System.ArtifactsDirectory)'